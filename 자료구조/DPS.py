import classStack

map = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [0, 0, 0, 0, 0, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 0, 0, 0, 1, 1, 1],
       [1, 1, 1, 1, 0, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
       [1, 1, 1, 1, 0, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 0, 0, 0, 1, 0, 'x'],
       [1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
maplen = len(map)


def findroad(x, y):
    if x < 0 or x > maplen - 1 or y < 0 or y > maplen - 1:
        return False
    else:
         return map[x][y] == 0 or map[x][y] == 'x'



def DPSE():
    stack = classStack.stack()
    stack.push((0, 1))

    while not stack.isEmpty():
        here = stack.pop()
        print("현재위치: ", here, end=" ")
        (x, y) = here

        if map[x][y] == 'x':
            return True
        else:
            map[x][y] = '.'
            if findroad(x, y - 1): stack.push((x, y - 1))
            if findroad(x, y + 1): stack.push((x, y + 1))
            if findroad(x - 1, y): stack.push((x - 1, y))
            if findroad(x + 1, y): stack.push((x + 1, y))
        print("stack: ", stack)
    return False


result = DPSE()
print("탐색결과: ", result)
print(map)
[[1, '.', 1, 1, 1, 1, 1, 1, 1, 1],
 [0, '.', '.', '.', '.', 1, 1, 1, 1, 1],
 [1, 1, 1, 1, '.', '.', '.', 1, 1, 1],
 [1, 1, 1, 1, '.', 1, 1, 1, 1, 1],
 [1, 1, 1, 1, '.', '.', '.', '.', '.', '.'],
 [1, 1, 1, 1, '.', 1, 1, 1, 1, 1],
 [1, 1, 1, 1, '.', '.', '.', 1, 1, 1],
 [1, 1, 1, 1, 0, 0, '.', '.', '.', 'x'],
 [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
 [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]

[[1, '.', 1, 1, 1, 1, 1, 1, 1, 1],
 ['.', '.', 0, 0, 0, 1, 1, 1, 1, 1],
 [1, 1, 1, 1, 0, 0, 0, 1, 1, 1],
 [1, 1, 1, 1, 0, 1, 1, 1, 1, 1],
 [1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
 [1, 1, 1, 1, 0, 1, 1, 1, 1, 1],
 [1, 1, 1, 1, 0, 0, 0, 1, 1, 1],
 [1, 1, 1, 1, 0, 0, 0, 0, 0, 'x'],
 [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
 [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]

[[1, '.', 1, 1, 1, 1, 1, 1, 1, 1],
 [0, '.', '.', '.', '.', 1, 1, 1, 1, 1],
 [1, 1, 1, 1, '.', 0, 0, 1, 1, 1],
 [1, 1, 1, 1, '.', 1, 1, 1, 1, 1],
 [1, 1, 1, 1, '.', 0, 0, 0, 0, 0],
 [1, 1, 1, 1, '.', 1, 1, 1, 1, 1],
 [1, 1, 1, 1, '.', '.', '.', 1, '.', 'x'],
 [1, 1, 1, 1, '.', '.', '.', '.', '.', 0],
 [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
 [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]

